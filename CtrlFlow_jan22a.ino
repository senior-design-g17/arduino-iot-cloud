#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "CtrlFlow"
  https://create.arduino.cc/cloud/things/2b50c770-2df2-4277-86ca-9e936612871b 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperature temperature2;
  CloudTemperature temperature1;
  CloudTemperatureSensor currentTemperature1;
  CloudTemperatureSensor currentTemperature2;
  CloudTemperature temperature3;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <RFM69.h>
#include <SPI.h>
#include <ArduinoLowPower.h>
#include <algorithm>    // std::min
// #include <string>

#include "pinDefs.h"
#include "serialSettings.h"
#include "radioSettings.h"

char buff[61]; //61 max payload for radio

// Init Radio Object
RFM69 radio;
Payload payload;
bool newPayload = false;

int target = 72;
int lastTemp = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
//   #ifdef SERIAL_EN
// 	  Serial.begin(SERIAL_BAUD);
// 	  delay(2000);
//   #endif

	// RADIO
	if (!radio.initialize(FREQUENCY, MYID, NETWORKID))
		DEBUGln("radio.init() FAIL");
	else
		DEBUGln("radio.init() SUCCESS");

	radio.setHighPower(true);
	//radio.setCS(RFM69_CS);

	if (ENCRYPT)
		radio.encrypt(ENCRYPTKEY);
		
	radio.spyMode(true);
}


void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  if (newPayload)
	{
		DEBUGln(payload.type);
		DEBUGln(payload.data);

		if (radio.sendWithRetry(HUBID, (const void *)(&payload), sizeof(payload), RETRY_COUNT, RETRY_WAIT))
		{
			DEBUGln("ACK received!");
			newPayload = false;
		}
	}

	if (radio.receiveDone())
	{
		Payload load = getLoad();
		updateIot(load);
	}
}

void updateIot(Payload load) {
		if(load.type == curr_temp)
		{
		  if(load.zoneID == 0)
		    currentTemperature1 = load.data;
		  else if(load.zoneID == 1)
		    currentTemperature2 = load.data;
		}
		else if(load.type == target_temp) {
		  if(load.zoneID == 0)
		    temperature1 = load.data;
		  else if(load.zoneID == 1)
		    temperature2 = load.data;
		  else if(load.zoneID == 2)
		    temperature3 = load.data;
		}
}

Payload getLoad()
{
	Payload load;

	if (radio.DATALEN == sizeof(Payload))
		load = *(Payload *)radio.DATA;

	if (radio.ACKRequested())
	{
		radio.sendACK();
		DEBUGln("ACK sent");
	}

	DEBUGln(load.zoneID);
	DEBUGln(load.type);
	DEBUGln(load.data);

	return load;
}

// todo make an askForState function
// handle a set temp target funcion


void onTemperature1Change() {
  String cstr = String((int)temperature1);
  String output = "Bedroom 1: " + cstr;
  Serial.println(output);

	// Fill payload
	payload.type = target_temp;
	payload.data = (int)temperature1;
	payload.zoneID = 0;
	newPayload = true;
}


void onTemperature2Change() {
  String cstr = String((int)temperature2);
  String output = "Bedroom 2: " + cstr;
  Serial.println(output);
  
  payload.type = target_temp;
	payload.data = (int)temperature2;
	payload.zoneID = 1;
	newPayload = true;
}


void onTemperature3Change() {
  String cstr = String((int)temperature3);
  String output = "Bedroom 3: " + cstr;
  Serial.println(output);
  
  payload.type = target_temp;
	payload.data = (int)temperature3;
	payload.zoneID = 2;
	newPayload = true;
}



